{"is_source_file": true, "format": "Python", "description": "This file defines classes and functions for configuring, interacting with, and mocking an AI/NLP provider within a medical assistant application. It includes data structures for configuration, client handling various providers (openai, azure_openai, litellm, mock), and methods to generate follow-up questions, summaries, and perform connectivity checks.", "external_files": ["os", "requests"], "external_methods": ["os.getenv", "requests.post"], "published": ["AIConfig", "AIClientError", "AIClient"], "classes": [{"name": "AIConfig", "description": "Holds configuration details for the AI/NLP provider, including provider type, API key, model, and API base URL. Provides methods to load from environment variables and validate configuration."}, {"name": "AIClientError", "description": "Custom exception class for errors raised by AIClient."}, {"name": "AIClient", "description": "Main class for interacting with various AI providers. Supports generating follow-up questions, summaries, and health intake dialogue management. Also includes a mock mode for offline testing."}], "methods": [{"name": "\"AIConfig\" from_env()", "description": "Loads AI configuration from environment variables.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "Tuple[bool,Dict[str,Any]] validate(self)", "description": "Validates the current AI configuration to ensure all required fields are present based on provider.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "None __init__(self, cfg: Optional[AIConfig] = None)", "description": "Initializes an AIClient instance with a given or environment-based configuration.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _headers(self)", "description": "Prepares HTTP headers for requests based on the provider's requirements.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str _endpoint(self)", "description": "Constructs the API endpoint URL for the specified provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _post(self, payload: dict)", "description": "Sends a POST request to the AI provider API with the given payload.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str ask_follow_up(self, dialogue: List[dict])", "description": "Generates a follow-up question or conclusion based on dialogue context.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str summarize_dialogue(self, dialogue: List[dict], patient_id: str)", "description": "Creates a clinical summary/note from a conversation between patient and AI.", "scope": "AIClient", "scopeKind": "class"}, {"name": "Dict[str,Any] live_check(self)", "description": "Performs a lightweight connectivity and credential check with the AI provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str choose(*options: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}, {"name": "str choose(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member", "description": "unavailable"}, {"name": "str|None detect_issue(text: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}], "calls": ["os.getenv", "requests.post"], "search-terms": ["AIConfig", "AIClient", "follow-up question", "clinical intake summary", "mock AI provider", "environment variable configuration", "healthcare-specific dialogue"], "state": 2, "file_id": 23, "knowledge_revision": 147, "git_revision": "f7692a041c99b96f4b90e04b4cbd14b1fac281e8", "revision_history": [{"74": ""}, {"82": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"107": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"112": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"122": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"123": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"124": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"127": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"132": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"133": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"138": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}, {"139": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}, {"146": "f7692a041c99b96f4b90e04b4cbd14b1fac281e8"}, {"147": "f7692a041c99b96f4b90e04b4cbd14b1fac281e8"}], "ctags": [{"_type": "tag", "name": "AIClient", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIClientError", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIConfig", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIConfig:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def __init__(self, cfg: Optional[AIConfig] = None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, cfg: Optional[AIConfig] = None)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_endpoint", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _endpoint(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_headers", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _headers(self) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_post", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _post(self, payload: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self, payload: dict)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "ask_follow_up", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def ask_follow_up(self, dialogue: List[dict]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict])", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(*options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(*options: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(seed: str, *options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member"}, {"_type": "tag", "name": "detect_issue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def detect_issue(text: str) -> str | None:$/", "file": true, "language": "Python", "typeref": "typename:str|None", "kind": "function", "signature": "(text: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "from_env", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def from_env() -> \"AIConfig\":$/", "language": "Python", "typeref": "typename:\"AIConfig\"", "kind": "member", "signature": "()", "scope": "AIConfig", "scopeKind": "class"}, {"_type": "tag", "name": "live_check", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def live_check(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "summarize_dialogue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def summarize_dialogue(self, dialogue: List[dict], patient_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict], patient_id: str)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def validate(self) -> Tuple[bool, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "AIConfig", "scopeKind": "class"}], "hash": "2e28139b210b510eac31f985663fa916", "format-version": 4, "code-base-name": "chatbot_backend", "filename": "chatbot_backend/api/ai.py"}