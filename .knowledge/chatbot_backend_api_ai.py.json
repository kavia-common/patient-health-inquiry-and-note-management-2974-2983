{"is_source_file": true, "format": "Python", "description": "This file defines classes and functions for configuring and interacting with multiple AI/NLP providers, including a mock implementation for testing. It includes configuration loading from environment variables, a client wrapper for making requests to different providers, and methods for generating follow-up questions and clinical summaries in a medical chatbot context.", "external_files": ["requests"], "external_methods": ["os.getenv"], "published": ["AIConfig", "AIClientError", "AIClient"], "classes": [{"name": "AIConfig", "description": "Dataclass for storing AI provider configuration details, loaded from environment variables, with validation method."}, {"name": "AIClientError", "description": "Custom exception class for errors encountered by AI client."}, {"name": "AIClient", "description": "Main client class providing methods to interact with AI providers, including querying, summarizing dialogues, and health checks. Supports multiple providers such as openai, azure_openai, litellm, and a mock variant."}], "methods": [{"name": "\"AIConfig\" from_env()", "description": "Static method of AIConfig to load configuration from environment variables.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "Tuple[bool,Dict[str,Any]] validate(self)", "description": "Method of AIConfig to validate the loaded configuration and provide hints if incomplete.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "None __init__(self, cfg: Optional[AIConfig] = None)", "description": "Constructor for AIClient, initializes with configuration.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _headers(self)", "description": "Provides appropriate HTTP headers based on current provider and API key.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str _endpoint(self)", "description": "Constructs the correct API endpoint URL depending on the provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _post(self, payload: dict)", "description": "Handles sending POST requests to the AI provider or generating mock responses based on dialogue context.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str ask_follow_up(self, dialogue: List[dict])", "description": "Generates a single follow-up medical question based on previous dialogue, crafted to guide patient intake.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str summarize_dialogue(self, dialogue: List[dict], patient_id: str)", "description": "Creates a concise clinical note from a dialogue and patient identifier.", "scope": "AIClient", "scopeKind": "class"}, {"name": "Dict[str,Any] live_check(self)", "description": "Performs a lightweight connectivity and credential check with the AI provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str choose(*options: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}], "calls": ["os.getenv", "requests.post"], "search-terms": ["AIConfig", "AIClient", "medical triage", "follow-up question", "clinical note", "mock AI responses", "provider configuration", "GPT-4", "environment variables", "health check"], "state": 2, "file_id": 23, "knowledge_revision": 123, "git_revision": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0", "revision_history": [{"74": ""}, {"82": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"107": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"112": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"122": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"123": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}], "ctags": [{"_type": "tag", "name": "AIClient", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIClientError", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIConfig", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIConfig:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def __init__(self, cfg: Optional[AIConfig] = None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, cfg: Optional[AIConfig] = None)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_endpoint", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _endpoint(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_headers", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _headers(self) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_post", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _post(self, payload: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self, payload: dict)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "ask_follow_up", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def ask_follow_up(self, dialogue: List[dict]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict])", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(*options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(*options: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "from_env", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def from_env() -> \"AIConfig\":$/", "language": "Python", "typeref": "typename:\"AIConfig\"", "kind": "member", "signature": "()", "scope": "AIConfig", "scopeKind": "class"}, {"_type": "tag", "name": "live_check", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def live_check(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "summarize_dialogue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def summarize_dialogue(self, dialogue: List[dict], patient_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict], patient_id: str)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def validate(self) -> Tuple[bool, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "AIConfig", "scopeKind": "class"}], "hash": "9d157fd072754c6340a2b160368692fe", "format-version": 4, "code-base-name": "chatbot_backend", "filename": "chatbot_backend/api/ai.py"}