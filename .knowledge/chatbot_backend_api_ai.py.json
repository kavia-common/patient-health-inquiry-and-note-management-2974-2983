{"is_source_file": true, "format": "Python", "description": "This file defines classes and functions for configuring and interacting with AI/NLP providers, including a mock provider for testing, and methods for generating and summarizing dialogue in a medical context. It includes detailed mock logic simulating medical inquiries and responses.", "external_files": ["os", "requests"], "external_methods": ["os.getenv", "requests.post"], "published": ["AIConfig", "AIClientError", "AIClient"], "classes": [{"name": "AIConfig", "description": "Configuration data class for AI/NLP provider settings, including provider type, API keys, model, and base URL, with methods to load from environment variables and validate configuration."}, {"name": "AIClientError", "description": "Custom exception class for handling errors related to the AI client."}, {"name": "AIClient", "description": "Main class providing an interface to various AI providers, supporting real and mock modes, with methods for asking follow-up questions, summarizing dialogues, and checking provider connectivity with detailed mock logic for medical scenarios."}], "methods": [{"name": "\"AIConfig\" from_env()", "description": "Static method of AIConfig to load configuration from environment variables.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "Tuple[bool,Dict[str,Any]] validate(self)", "description": "Method of AIConfig to validate current configuration and suggest actionable steps.", "scope": "AIConfig", "scopeKind": "class"}, {"name": "None __init__(self, cfg: Optional[AIConfig] = None)", "description": "Constructor of AIClient, initializes configuration from environment or provided.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _headers(self)", "description": "Private method of AIClient to generate appropriate HTTP headers based on provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str _endpoint(self)", "description": "Private method of AIClient to construct the API endpoint URL for requests.", "scope": "AIClient", "scopeKind": "class"}, {"name": "dict _post(self, payload: dict)", "description": "Private method of AIClient to send an HTTP POST request to the provider or simulate response in mock mode.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str ask_follow_up(self, dialogue: List[dict])", "description": "Method of AIClient to generate the next follow-up question or conclusion based on dialogue context.", "scope": "AIClient", "scopeKind": "class"}, {"name": "str summarize_dialogue(self, dialogue: List[dict], patient_id: str)", "description": "Method of AIClient to produce a concise clinical summary from a dialogue, possibly converting questions into structured summaries.", "scope": "AIClient", "scopeKind": "class"}, {"name": "Dict[str,Any] live_check(self)", "description": "Method of AIClient to perform a lightweight connectivity check with the AI provider.", "scope": "AIClient", "scopeKind": "class"}, {"name": "bool _looks_like_question(text: str)", "scope": "AIClient.summarize_dialogue", "scopeKind": "member", "description": "unavailable"}, {"name": "str _synthesize_from_user(dialogue_turns: List[dict])", "scope": "AIClient.summarize_dialogue", "scopeKind": "member", "description": "unavailable"}, {"name": "str choose(*options: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}, {"name": "str choose(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member", "description": "unavailable"}, {"name": "str|None detect_issue(text: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}, {"name": "present_if(cond, text)", "scope": "AIClient.summarize_dialogue._synthesize_from_user", "scopeKind": "function", "description": "unavailable"}], "calls": ["os.getenv", "requests.post"], "search-terms": ["AIConfig", "AIClient", "mock dialogue responses", "medical dialogue summarization", "FHIR-like content generation", "environment variable loading", "provider validation", "medication and allergy detection", "conclusion and follow-up prompts"], "state": 2, "file_id": 23, "knowledge_revision": 156, "git_revision": "641eebf5318f3eaf442a45e4a31dce654537d53b", "revision_history": [{"74": ""}, {"82": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"107": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"112": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"122": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"123": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"124": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"127": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"132": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"133": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"138": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}, {"139": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}, {"146": "f7692a041c99b96f4b90e04b4cbd14b1fac281e8"}, {"147": "f7692a041c99b96f4b90e04b4cbd14b1fac281e8"}, {"154": "641eebf5318f3eaf442a45e4a31dce654537d53b"}, {"156": "641eebf5318f3eaf442a45e4a31dce654537d53b"}], "ctags": [{"_type": "tag", "name": "AIClient", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIClientError", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIConfig", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIConfig:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def __init__(self, cfg: Optional[AIConfig] = None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, cfg: Optional[AIConfig] = None)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_endpoint", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _endpoint(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_headers", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _headers(self) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_looks_like_question", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^        def _looks_like_question(text: str) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(text: str)", "scope": "AIClient.summarize_dialogue", "scopeKind": "member"}, {"_type": "tag", "name": "_post", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _post(self, payload: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self, payload: dict)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_synthesize_from_user", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^        def _synthesize_from_user(dialogue_turns: List[dict]) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(dialogue_turns: List[dict])", "scope": "AIClient.summarize_dialogue", "scopeKind": "member"}, {"_type": "tag", "name": "ask_follow_up", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def ask_follow_up(self, dialogue: List[dict]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict])", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(*options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(*options: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(seed: str, *options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member"}, {"_type": "tag", "name": "detect_issue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def detect_issue(text: str) -> str | None:$/", "file": true, "language": "Python", "typeref": "typename:str|None", "kind": "function", "signature": "(text: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "from_env", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def from_env() -> \"AIConfig\":$/", "language": "Python", "typeref": "typename:\"AIConfig\"", "kind": "member", "signature": "()", "scope": "AIConfig", "scopeKind": "class"}, {"_type": "tag", "name": "live_check", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def live_check(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "present_if", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def present_if(cond, text):$/", "file": true, "language": "Python", "kind": "function", "signature": "(cond, text)", "scope": "AIClient.summarize_dialogue._synthesize_from_user", "scopeKind": "function"}, {"_type": "tag", "name": "summarize_dialogue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def summarize_dialogue(self, dialogue: List[dict], patient_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict], patient_id: str)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def validate(self) -> Tuple[bool, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "AIConfig", "scopeKind": "class"}], "hash": "199a4cffb0cb3a2c18d4706f3bf9ba90", "format-version": 4, "code-base-name": "chatbot_backend", "filename": "chatbot_backend/api/ai.py"}