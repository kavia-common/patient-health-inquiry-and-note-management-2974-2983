{"is_source_file": true, "format": "Python", "description": "This Python source file defines classes and functions for configuring and interfacing with various AI/NLP providers, including request handling, mock responses, and dialogue-based interactions for medical intake and summarization.", "external_files": ["os", "dataclasses", "typing", "requests"], "external_methods": ["os.getenv"], "published": ["AIConfig", "AIClient", "AIClientError"], "classes": [{"name": "AIConfig", "description": "Represents the configuration parameters for AI/NLP providers, including loading from environment variables and validation."}, {"name": "AIClient", "description": "A client class that wraps interactions with different AI providers, supporting dialogue prompts, summaries, and mock responses for testing."}, {"name": "AIClientError", "description": "Custom exception class for handling errors within AI client operations."}], "methods": [{"name": "AIConfig.from_env", "description": "Static method to load AI configuration from environment variables."}, {"name": "AIConfig.validate", "description": "Validates the current configuration, ensuring required parameters are set based on the provider."}, {"name": "AIClient.__init__", "description": "Initializes the AI client possibly with provided configuration or default environment-based configuration."}, {"name": "AIClient._headers", "description": "Constructs appropriate request headers based on the provider."}, {"name": "AIClient._endpoint", "description": "Returns the API endpoint URL for the configured provider."}, {"name": "AIClient._post", "description": "Executes a POST request to the AI API endpoint or generates a mock response."}, {"name": "AIClient.ask_follow_up", "description": "Generates a follow-up question or conclusion based on dialogue history."}, {"name": "AIClient.summarize_dialogue", "description": "Creates a concise clinical note summarizing the conversation."}, {"name": "AIClient.live_check", "description": "Performs a lightweight check to validate connectivity and credentials with the AI provider."}, {"name": "None __init__(self, cfg: Optional[AIConfig] = None)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str _endpoint(self)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "dict _headers(self)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "dict _post(self, payload: dict)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str ask_follow_up(self, dialogue: List[dict])", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str choose(*options: str)", "scope": "AIClient._post", "scopeKind": "member", "description": "unavailable"}, {"name": "str choose(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member", "description": "unavailable"}, {"name": "\"AIConfig\" from_env()", "scope": "AIConfig", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] live_check(self)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str summarize_dialogue(self, dialogue: List[dict], patient_id: str)", "scope": "AIClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Tuple[bool,Dict[str,Any]] validate(self)", "scope": "AIConfig", "scopeKind": "class", "description": "unavailable"}], "calls": ["os.getenv", "requests.post"], "search-terms": ["AIConfig", "AIClient", "medical dialogue", "mock response", "AI provider", "conversation summarization", "follow-up question generation", "environment variable configuration", "Azure OpenAI endpoint", "dialogue-based AI interaction"], "state": 2, "file_id": 23, "knowledge_revision": 139, "git_revision": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb", "revision_history": [{"74": ""}, {"82": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"107": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"112": "d0cd5b1f677e611fe35f99c75e3e64c84fb825cc"}, {"122": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"123": "d6ac3ac7d570d586ad65b61d3d4f5af96b4d21c0"}, {"124": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"127": "181d15a785e35472029c6a98c86ed5148c03ee24"}, {"132": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"133": "39e634f39ccd5ccf738212dbb6fe07f7de1cf821"}, {"138": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}, {"139": "a086d62b1ec015d7c2949094cf0a9dbf3d8846bb"}], "ctags": [{"_type": "tag", "name": "AIClient", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIClientError", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AIConfig", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^class AIConfig:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def __init__(self, cfg: Optional[AIConfig] = None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, cfg: Optional[AIConfig] = None)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_endpoint", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _endpoint(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_headers", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _headers(self) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "_post", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def _post(self, payload: dict) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "member", "signature": "(self, payload: dict)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "ask_follow_up", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def ask_follow_up(self, dialogue: List[dict]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict])", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(*options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(*options: str)", "scope": "AIClient._post", "scopeKind": "member"}, {"_type": "tag", "name": "choose", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^            def choose(seed: str, *options: str) -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(seed: str, *options: str)", "scope": "AIClient.ask_follow_up", "scopeKind": "member"}, {"_type": "tag", "name": "from_env", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def from_env() -> \"AIConfig\":$/", "language": "Python", "typeref": "typename:\"AIConfig\"", "kind": "member", "signature": "()", "scope": "AIConfig", "scopeKind": "class"}, {"_type": "tag", "name": "live_check", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def live_check(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "summarize_dialogue", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def summarize_dialogue(self, dialogue: List[dict], patient_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, dialogue: List[dict], patient_id: str)", "scope": "AIClient", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/patient-health-inquiry-and-note-management-2974-2983/chatbot_backend/api/ai.py", "pattern": "/^    def validate(self) -> Tuple[bool, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "AIConfig", "scopeKind": "class"}], "hash": "eee4de3ba83aeeaeec389096e77fb975", "format-version": 4, "code-base-name": "chatbot_backend", "filename": "chatbot_backend/api/ai.py"}